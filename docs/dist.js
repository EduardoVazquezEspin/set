"use strict";function t(t,e,s,r){return new(s||(s=Promise))((function(n,i){function a(t){try{o(r.next(t))}catch(t){i(t)}}function c(t){try{o(r.throw(t))}catch(t){i(t)}}function o(t){var e;t.done?n(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,c)}o((r=r.apply(t,e||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;class e{constructor(t){this.value=t,this.subscribers=[]}get(){return this.value}set(t){this.value=t,this.trigger()}trigger(){this.subscribers.forEach((t=>t(this.value)))}subscribe(t){return this.subscribers.push(t),()=>{this.subscribers=this.subscribers.filter((e=>e!==t))}}subscribeAndRun(t){return this.subscribers.push(t),t(this.value),()=>{this.subscribers=this.subscribers.filter((e=>e!==t))}}}class s{constructor(t){if(3!==t.length)throw new Error("Invalid set length");this.cards=t}getCards(){return this.cards}isValid(){for(let t=0;t<4;t++)if(!this.areThreeCharactersAllEqualOrAllDifferent(this.cards[0][t],this.cards[1][t],this.cards[2][t]))return!1;return!0}areThreeCharactersAllEqualOrAllDifferent(t,e,s){return t===e&&t===s||t!==e&&t!==s&&e!==s}equals(t){return!!t.cards.includes(this.cards[0])&&(!!t.cards.includes(this.cards[1])&&!!t.cards.includes(this.cards[2]))}}class r{static Random(){return`${Math.floor(3*Math.random())}${Math.floor(3*Math.random())}${Math.floor(3*Math.random())}${Math.floor(3*Math.random())}`}static CompressOne(t){const e=3*parseInt(t[0])+parseInt(t[1]),s=3*parseInt(t[2])+parseInt(t[3]);return String.fromCharCode(e+49)+String.fromCharCode(s+49)}static Compress(t){return t.reduce(((t,e)=>t+this.CompressOne(e)),"")}static DeCompressChar(t){let e=t.charCodeAt(0)-49,s=(e%3).toString();return e=Math.floor(e/3),s=(e%3).toString()+s,s}static DeCompress(t){const e=[];for(let s=0;s<t.length/2;s++)e.push(this.DeCompressChar(t[2*s])+this.DeCompressChar(t[2*s+1]));return e}}const n={"PREVENT-NO-SOLUTION":{value:"TRUE",isTruthy:!0},"GAME-ID":{value:"",isTruthy:!1}};class i{constructor(){this.updateUrl=()=>{const t=document.title,e=window.location.origin+window.location.pathname,s=new URLSearchParams,r=this.dictionary.get(),i=Object.keys(r).filter((t=>r[t].get().value.get()!==n[t].value));i.forEach((t=>s.set(t,r[t].get().value.get())));const a=0===i.length?e:e+"?"+s.toString();window.history.replaceState({},t,a)};const t=new URLSearchParams(window.location.search),s=Object.entries(n);this.dictionary=new e(s.reduce(((s,r)=>{const n=t.get(r[0].toUpperCase());if(null===n)return Object.assign(Object.assign({},s),{[r[0]]:new e({value:new e(r[1].value),isTruthy:new e(r[1].isTruthy)})});const a=n.toUpperCase(),c=i.isStringTruthy.includes(a);return Object.assign(Object.assign({},s),{[r[0]]:new e({value:new e(a),isTruthy:new e(c)})})}),{})),this.dictionary.subscribe(this.updateUrl)}isFeatureEnabled(t){return this.dictionary.get()[t].get().isTruthy}getFeatureValue(t){return this.dictionary.get()[t].get().value}setFeatureValue(t,e){let s,r;"string"==typeof e?(s=e,r=i.isStringTruthy.includes(s)):(r=e,s=r?"TRUE":"FALSE");const n=this.dictionary,a=n.get()[t],{value:c,isTruthy:o}=a.get();c.set(s),o.set(r),a.trigger(),n.trigger()}}i.isStringTruthy=["T","TRUE","Y","YES","S","SI","SÍ"];class a extends HTMLElement{constructor(){super(),this.color="red",this.root=this.attachShadow({mode:"open"});const t=document.createElement("div");t.setAttribute("class","box"),this.root.appendChild(t),this.setColor("red");const e=document.createElement("style");e.innerText=a.styles,this.root.appendChild(e)}NextColor(){const t=(a.colors.indexOf(this.color)+1)%a.colors.length;this.setColor(a.colors[t])}setColor(t){var e;this.color=t;const s=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector("div");null==s||s.setAttribute("class",`box ${t}`)}connectedCallback(){setInterval((()=>this.NextColor()),2e3)}}a.colors=["red","blue","green"],a.styles="\n  .red {\n    background-color: red;\n  }\n\n  .blue {\n    background-color: blue;\n  }\n\n  .green {\n    background-color: green;\n  }\n\n  .box {\n    width: 100px;\n    height: 100px;\n  }\n  ".replaceAll("\n",""),customElements.define("color-square",a);class c extends HTMLElement{constructor(){super(),this.onClick=()=>{const t=this.getAttribute("card-id");if(null===t||!c.isIdValidRegex.test(t))return;getGameManager().toggleCardSelected(t)},this.attributeChangedCallbackIsClicked=t=>{const e=this.root.querySelector("img");null!==e&&(t.isSelected?e.setAttribute("class","card clicked"):e.setAttribute("class","card"))},this.attributeChangedCallbackClickable=t=>{const e="true"===t,s=this.root.querySelector("img");null!==s&&(e?s.addEventListener("mouseup",this.onClick):s.removeEventListener("mouseup",this.onClick))},this.root=this.attachShadow({mode:"open"}),this.subscriptions=[];const t=document.createElement("style");t.innerText=c.styles,this.root.appendChild(t);const e=document.createElement("img");e.setAttribute("class","card"),this.root.appendChild(e)}connectedCallback(){const t=this.getAttribute("card-id");if(null===t||!c.isIdValidRegex.test(t))return;const e=getGameManager().getCard(t);if(void 0===e)return;this.subscriptions.forEach((t=>t())),this.subscriptions=[];const s=e.subscribeAndRun(this.attributeChangedCallbackIsClicked);this.subscriptions.push(s)}disconnectedCallback(){this.subscriptions.forEach((t=>t())),this.subscriptions=[]}attributeChangedCallback(t,e,s){if(e!==s)switch(t){case"card-id":this.attributeChangedCallbackCardId(s);break;case"clickable":this.attributeChangedCallbackClickable(s)}}attributeChangedCallbackCardId(t){if(null===t||!c.isIdValidRegex.test(t))return;const e=this.root.querySelector("img");null!==e&&(e.src=`./img/${t}.png`)}}c.observedAttributes=["card-id","clickable"],c.styles="\n  .card {\n    width: var(--card-w);\n    height: var(--card-h);\n    border: 1px black solid;\n    border-radius: var(--card-border);\n    box-shadow: 2px 1px 1px black;\n    cursor: pointer;\n  }\n  .clicked {\n    filter: brightness(50%);\n  }\n  ".replaceAll("\n",""),c.isIdValidRegex=/^[0-2]{4}$/,customElements.define("card-displayer",c);class o extends HTMLElement{constructor(){super(),this.renderAllCards=t=>{for(;this.container.lastChild;)this.container.removeChild(this.container.lastChild);t.forEach((t=>{const e=document.createElement("card-displayer");e.setAttribute("card-id",t.id),e.setAttribute("clickable","true"),this.container.appendChild(e)}))},this.root=this.attachShadow({mode:"open"}),this.subscriptions=[];const t=document.createElement("style");t.innerText=o.styles,this.root.appendChild(t),this.container=document.createElement("div"),this.container.setAttribute("class","container"),this.root.appendChild(this.container)}connectedCallback(){const t=getGameManager().getCards();this.subscriptions.forEach((t=>t())),this.subscriptions=[];const e=t.subscribeAndRun((t=>{const e=t.map((t=>t.get()));this.renderAllCards(e)}));this.subscriptions.push(e)}disconnectedCallBack(){this.subscriptions.forEach((t=>t())),this.subscriptions=[]}}o.styles="\n  .container {\n    display: grid;\n    grid-template-columns: var(--card-w) var(--card-w) var(--card-w);\n    grid-gap: 10px;\n    padding: 10px;\n  \n  }\n  ".replaceAll("\n",""),customElements.define("board-displayer",o);class l extends HTMLElement{constructor(){super(),this.root=this.attachShadow({mode:"open"}),this.subscriptions=[];const t=document.createElement("style");t.innerText=l.styles,this.root.appendChild(t),this.container=document.createElement("div"),this.container.setAttribute("class","container"),this.root.appendChild(this.container);const e=document.createElement("board-displayer");this.container.appendChild(e);const s=document.createElement("div");s.setAttribute("class","menu"),this.container.appendChild(s),this.totalSetsP=document.createElement("p"),s.appendChild(this.totalSetsP);const r=document.createElement("found-sets-displayer");s.appendChild(r)}connectedCallback(){const t=getGameManager().getSets();this.subscriptions.forEach((t=>t())),this.subscriptions=[];const e=t.subscribeAndRun((t=>{this.totalSetsP.innerText=`Total sets: ${t.length}`}));this.subscriptions.push(e)}disconnectedCallback(){this.subscriptions.forEach((t=>t())),this.subscriptions=[]}attributeChangedCallback(t,e,s){}}l.observedAttributes=["card-array"],l.styles="\n  .container {\n    display: flex;\n    flex-direction: row;\n  }\n  .menu{\n  }\n  ".replaceAll("\n",""),customElements.define("game-displayer",l);class d extends HTMLElement{constructor(){super(),this.root=this.attachShadow({mode:"open"}),this.subscriptions=[];const t=document.createElement("style");t.innerHTML=d.styles,this.root.appendChild(t),this.container=document.createElement("div"),this.container.setAttribute("class","container"),this.root.appendChild(this.container)}connectedCallback(){const t=getGameManager(),e=t.getFoundSets();this.subscriptions.forEach((t=>t())),this.subscriptions=[];const s=e.subscribeAndRun((e=>{for(;null!==this.container.lastChild;)this.container.removeChild(this.container.lastChild);e.forEach((t=>{t.getCards().forEach((t=>{const e=document.createElement("img");e.src=`./img/${t}R.png`,e.setAttribute("class","card"),this.container.appendChild(e)}))}));const s=t.getSets().get().length;if(e.length===s){const e=document.createElement("button");e.innerHTML="You won!<br>Start again?",e.onmouseup=()=>{t.initGame()},this.container.appendChild(e)}}));this.subscriptions.push(s)}disconnectedCallback(){this.subscriptions.forEach((t=>t())),this.subscriptions=[]}attributeChangedCallback(t,e,s){}}d.styles="\n  .container {\n    display: grid;\n    grid-template-columns: var(--mini-card-w) var(--mini-card-w) var(--mini-card-w);\n    grid-gap: 3px;\n    padding: 5px;\n  }\n\n  .card {\n    width: var(--mini-card-w);\n    height: var(--mini-card-h);\n    border: 1px black solid;\n    border-radius: var(--card-border);\n    box-shadow: 2px 1px 1px black;\n  }\n\n  button{\n    width: max-content;\n    height: max-content;\n  }\n  ".replaceAll("\n",""),customElements.define("found-sets-displayer",d);const h=new i;globalThis.getFeaturesManager=()=>h;const u=new class{constructor(){this.updateFeatureFlag=()=>{const t=getFeaturesManager(),e=this.cards.get().map((t=>t.get().id)),s=r.Compress(e);t.setFeatureValue("GAME-ID",s)},this.cards=new e([]),this.sets=new e([]),this.foundSets=new e([]),this.cards.subscribe(this.updateFeatureFlag);const t=getFeaturesManager().getFeatureValue("GAME-ID").get();if(""===t)this.initGame();else{const e=r.DeCompress(t);this.loadGame(e)}}initGame(){let t=[],e=[];const s=getFeaturesManager().isFeatureEnabled("PREVENT-NO-SOLUTION").get();do{for(t=[];t.length<12;){const e=r.Random();t.every((t=>t!==e))&&t.push(e)}e=this.calculateAllSets(t)}while(s&&0===e.length);this.loadGame(t,e)}loadGame(t,s){const r=t.map((t=>new e({id:t,isSelected:!1})));s=null!=s?s:this.calculateAllSets(t),this.sets.set(s),this.foundSets.set([]),this.cards.set(r)}getCards(){return this.cards}getCard(t){return this.cards.get().find((e=>e.get().id===t))}getSets(){return this.sets}getFoundSets(){return this.foundSets}toggleCardSelected(t){const e=this.cards.get().find((e=>e.get().id===t));void 0!==e&&(e.set({id:t,isSelected:!e.get().isSelected}),this.checkVictory())}checkVictory(){return t(this,void 0,void 0,(function*(){yield new Promise((t=>setTimeout(t,10)));const t=this.cards.get().filter((t=>t.get().isSelected)),e=t.map((t=>t.get().id));if(3!==e.length)return;const r=new s(e);t.forEach((t=>t.set({id:t.get().id,isSelected:!1}))),r.isValid()?this.foundSets.get().some((t=>t.equals(r)))?alert("Already found"):this.foundSets.set([...this.foundSets.get(),r]):alert("Wrong")}))}calculateAllSets(t){const e=[];for(let r=0;r<t.length-2;r++)for(let n=r+1;n<t.length-1;n++)for(let i=n+1;i<t.length;i++){const a=new s([t[r],t[n],t[i]]);a.isValid()&&e.push(a)}return e}};globalThis.getGameManager=()=>u;
//# sourceMappingURL=dist.js.map
